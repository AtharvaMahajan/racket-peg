(module anything racket
  (provide (all-defined-out))
  (require peg/peg)
  (begin
    (define-peg/drop _ (* (or #\space #\tab #\newline)))
    (define-peg alphabetic (name v (or (range #\a #\z) (range #\A #\Z))) (string-ref v 0))
    (define-peg character (and (drop "#\\") (name v code)) v)
    (define-peg code (or null backspace tab newline vtab page return space delete alphabetic-code digit))
    (define-peg alphabetic-code (and (name v alphabetic) (! alphabetic)) v)
    (define-peg tab (and "tab" (! alphabetic)) (integer->char 9))
    (define-peg null (and (or "null" "nul") (! alphabetic)) (integer->char 0))
    (define-peg backspace (and "backspace" (! alphabetic)) (integer->char 8))
    (define-peg newline (and (or "newline" "linefeed") (! alphabetic)) (integer->char 10))
    (define-peg vtab (and "vtab" (! alphabetic)) (integer->char 11))
    (define-peg page (and "page" (! alphabetic)) (integer->char 12))
    (define-peg return (and "return" (! alphabetic)) (integer->char 13))
    (define-peg space (and "space" (! alphabetic)) (integer->char 32))
    (define-peg delete (and "rubout" (! alphabetic)) (integer->char 127))
    (define-peg digit (name v (range #\0 #\9)) (string-ref v 0))
    (define-peg s-exp (or list quote quasiquote unquote boolean number identifier character string))
    (define-peg list (and "(" _ (name lst (* (and s-exp _))) ")") lst)
    (define-peg quote (and "'" _ (name s s-exp)) (list 'quote s))
    (define-peg quasiquote (and "`" _ (name s s-exp)) (list 'quasiquote s))
    (define-peg unquote (and "," _ (name s s-exp)) (list 'unquote s))
    (define-peg boolean (or (name x "#t") (name x "#f")) (equal? "#t" x))
    (define-peg identifier (name s (+ (and (! (or #\space #\( #\) #\[ #\] #\{ #\} #\" #\, #\' #\` #\; #\# #\| #\\)) (any-char)))) (string->symbol s))
    (define-peg number (name n (+ (range #\0 #\9))) (string->number n))
    (define-peg string (and #\" (name s (* (or (and (! (or #\" #\\)) (any-char)) (and (drop #\\) (any-char))))) #\") s)))
