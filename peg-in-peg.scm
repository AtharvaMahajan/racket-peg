(define-module (racket-peg peg-in-peg)
  #:use-module (racket-peg push-pop-boxes)
  #:use-module (racket-peg peg-result)
  #:use-module (racket-peg s-exp)
  #:use-module (racket-peg peg))

(define-peg/drop _ (* (or (or #\space #\tab #\newline) (and "//" (* (and (! #\newline) (any-char)))))))
(define-peg/drop SLASH (and "/" _))
(define-peg/tag name (and (or (range #\a #\z) (range #\A #\Z) #\_) (* (or (range #\a #\z) (range #\A #\Z) (range #\0 #\9) #\- #\_ #\.)) _))
(define-peg/tag rule (and name (or "<--" "<-" "<") _ pattern (? (and "->" _ s-exp _)) ";" _))
(define-peg/tag pattern (and alternative (* (and SLASH alternative))))
(define-peg/tag alternative (+ expression))
(define-peg/tag expression (and (? (and name (drop ":") _)) (? (and (or #\! #\& #\~) _)) primary (? (and (or #\* #\+ #\?) _))))
(define-peg/tag primary (or (and "(" _ pattern ")" _) (and "." _) literal charclass name))
(define-peg/tag literal (and (drop #\') (* (or (and (drop #\\) (or #\' #\\)) (and (! (or #\' #\\)) (any-char)))) (drop #\') _))
(define-peg/tag charclass (and (drop "[") (? "^") (+ (or cc-range cc-escape cc-single)) (drop "]") _))
(define-peg/tag cc-range (and cc-char (drop "-") cc-char))
(define-peg/tag cc-escape (and (drop #\\) (any-char)))
(define-peg/tag cc-single cc-char)
(define-peg cc-char (or (and (! cc-escape-char) (any-char)) "n" "t"))
(define-peg cc-escape-char (or "[" "]" "-" "^" "\\" "n" "t"))
(define-peg/tag peg (and _ (* import) (+ rule)))
(export peg-rule:peg)
(define-peg/tag import (and s-exp _ ";" _))
