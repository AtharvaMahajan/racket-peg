#lang peg

_ < [ \t\n]*;

s-exp <-
  dot-pair / list /
  quote / quasiquote / unquote /
  boolean / number / identifier / character / string;

list <- '(' _ lst:(s-exp _)* ')' -> lst;

quote      <- '\'' _ s:s-exp -> (list 'quote s);
quasiquote <- '`' _ s:s-exp  -> (list 'quasiquote s);
unquote    <- ',' _ s:s-exp  -> (list 'unquote s);

boolean    <- x:'#t' / x:'#f'               -> (equal? "#t" x);
identifier <- s:[^ ()\[\]{}",'`;#|\\]+      -> (string->symbol s);
number     <- n:[0-9]+                      -> (string->number n);
string     <- ["] s:([^"\\] / ~[\\] .)* ["] -> s;

character <- ~'#\\' v:code -> v;
alphabetic <- v:[a-zA-Z] -> (string-ref v 0);
code <- named-char / alphabetic-code / digit;
named-char <- nm:('null' / 'nul' / 'backspace' / 'tab' / 'newline' / 'tab' / 'vtab' / 'page' / 'return' / 'space' / 'rubout') !alphabetic
  -> (cadr (assoc nm '(("null" #\null)
                       ("nul" #\null)
                       ("backspace" #\backspace)
                       ("tab" #\tab)
                       ("newline" #\newline)
                       ("vtab" #\vtab)
                       ("page" #\page)
                       ("return" #\return)
                       ("space" #\space)
                       ("rubout" #\rubout))));
alphabetic-code <- v:alphabetic ! alphabetic -> v;
digit <- v:[0-9] -> (string-ref v 0);



dot-pair <- ~'(' _ front:( (! '.') s-exp ( _ (! '.') s-exp)*) ' ' _ ~'.' ' ' _ back:s-exp _ ~')'
   -> (let ((l (append front (list back))))
        (apply list* l));
